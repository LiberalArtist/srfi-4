;;;; r6rs.bytevectors.import.scm - GENERATED BY CHICKEN 5.0.0 -*- Scheme -*-

(scheme#eval
  '(import-syntax
     scheme
     srfi-4
     (only chicken.base include error void infinite? nan?)
     (only chicken.bitwise
           bitwise-not
           bitwise-and
           bitwise-ior
           arithmetic-shift)
     chicken.foreign
     chicken.module
     utf8
     (rename
       (only srfi-4
             make-u8vector
             u8vector?
             u8vector-length
             u8vector-ref
             u8vector-set!)
       (u8vector? bytevector?)
       (u8vector-length bytevector-length)
       (u8vector-ref bytevector-u8-ref)
       (u8vector-set! bytevector-u8-set!))))
(##sys#register-compiled-module
  'r6rs.bytevectors
  'r6rs.bytevectors
  (scheme#list)
  '((native-endianness . r6rs.bytevectors#native-endianness)
    (bytevector? . srfi-4#u8vector?)
    (make-bytevector . r6rs.bytevectors#make-bytevector)
    (bytevector-length . srfi-4#u8vector-length)
    (bytevector-fill! . r6rs.bytevectors#bytevector-fill!)
    (r6rs:bytevector-copy! . r6rs.bytevectors#r6rs:bytevector-copy!)
    (bytevector-copy . r6rs.bytevectors#bytevector-copy)
    (bytevector-u8-ref . srfi-4#u8vector-ref)
    (bytevector-s8-ref . r6rs.bytevectors#bytevector-s8-ref)
    (bytevector-u8-set! . srfi-4#u8vector-set!)
    (bytevector-s8-set! . r6rs.bytevectors#bytevector-s8-set!)
    (bytevector-uint-ref . r6rs.bytevectors#bytevector-uint-ref)
    (bytevector-sint-ref . r6rs.bytevectors#bytevector-sint-ref)
    (bytevector-uint-set! . r6rs.bytevectors#bytevector-uint-set!)
    (bytevector-sint-set! . r6rs.bytevectors#bytevector-sint-set!)
    (bytevector-u16-ref . r6rs.bytevectors#bytevector-u16-ref)
    (bytevector-s16-ref . r6rs.bytevectors#bytevector-s16-ref)
    (bytevector-u16-set! . r6rs.bytevectors#bytevector-u16-set!)
    (bytevector-s16-set! . r6rs.bytevectors#bytevector-s16-set!)
    (bytevector-u16-native-ref . r6rs.bytevectors#bytevector-u16-native-ref)
    (bytevector-s16-native-ref . r6rs.bytevectors#bytevector-s16-native-ref)
    (bytevector-u16-native-set! . r6rs.bytevectors#bytevector-u16-native-set!)
    (bytevector-s16-native-set! . r6rs.bytevectors#bytevector-s16-native-set!)
    (bytevector-u32-ref . r6rs.bytevectors#bytevector-u32-ref)
    (bytevector-s32-ref . r6rs.bytevectors#bytevector-s32-ref)
    (bytevector-u32-set! . r6rs.bytevectors#bytevector-u32-set!)
    (bytevector-s32-set! . r6rs.bytevectors#bytevector-s32-set!)
    (bytevector-u32-native-ref . r6rs.bytevectors#bytevector-u32-native-ref)
    (bytevector-s32-native-ref . r6rs.bytevectors#bytevector-s32-native-ref)
    (bytevector-u32-native-set! . r6rs.bytevectors#bytevector-u32-native-set!)
    (bytevector-s32-native-set! . r6rs.bytevectors#bytevector-s32-native-set!)
    (bytevector-u64-ref . r6rs.bytevectors#bytevector-u64-ref)
    (bytevector-s64-ref . r6rs.bytevectors#bytevector-s64-ref)
    (bytevector-u64-set! . r6rs.bytevectors#bytevector-u64-set!)
    (bytevector-s64-set! . r6rs.bytevectors#bytevector-s64-set!)
    (bytevector-u64-native-ref . r6rs.bytevectors#bytevector-u64-native-ref)
    (bytevector-s64-native-ref . r6rs.bytevectors#bytevector-s64-native-ref)
    (bytevector-u64-native-set! . r6rs.bytevectors#bytevector-u64-native-set!)
    (bytevector-s64-native-set! . r6rs.bytevectors#bytevector-s64-native-set!)
    (bytevector=? . r6rs.bytevectors#bytevector=?)
    (bytevector-ieee-single-native-ref
      .
      r6rs.bytevectors#bytevector-ieee-single-native-ref)
    (bytevector-ieee-single-ref . r6rs.bytevectors#bytevector-ieee-single-ref)
    (bytevector-ieee-double-native-ref
      .
      r6rs.bytevectors#bytevector-ieee-double-native-ref)
    (bytevector-ieee-double-ref . r6rs.bytevectors#bytevector-ieee-double-ref)
    (bytevector-ieee-single-native-set!
      .
      r6rs.bytevectors#bytevector-ieee-single-native-set!)
    (bytevector-ieee-single-set!
      .
      r6rs.bytevectors#bytevector-ieee-single-set!)
    (bytevector-ieee-double-native-set!
      .
      r6rs.bytevectors#bytevector-ieee-double-native-set!)
    (bytevector-ieee-double-set!
      .
      r6rs.bytevectors#bytevector-ieee-double-set!)
    (r6rs:bytevector-copy! . r6rs.bytevectors#r6rs:bytevector-copy!)
    (bytevector-copy . r6rs.bytevectors#bytevector-copy)
    (bytevector->u8-list . r6rs.bytevectors#bytevector->u8-list)
    (u8-list->bytevector . r6rs.bytevectors#u8-list->bytevector)
    (bytevector->uint-list . r6rs.bytevectors#bytevector->uint-list)
    (bytevector->sint-list . r6rs.bytevectors#bytevector->sint-list)
    (uint-list->bytevector . r6rs.bytevectors#uint-list->bytevector)
    (sint-list->bytevector . r6rs.bytevectors#sint-list->bytevector)
    (utf8->string . r6rs.bytevectors#utf8->string)
    (utf16->string . r6rs.bytevectors#utf16->string)
    (utf32->string . r6rs.bytevectors#utf32->string)
    (string->utf8 . r6rs.bytevectors#string->utf8)
    (string->utf16 . r6rs.bytevectors#string->utf16)
    (string->utf32 . r6rs.bytevectors#string->utf32))
  (scheme#list
    (scheme#cons
      'endianness
      (syntax-rules () ((_ big) 'big) ((_ little) 'little))))
  (scheme#list
    (scheme#cons
      's8->u8
      (syntax-rules
        ()
        ((_ val0) (let ((val val0)) (if (negative? val) (+ val 256) val)))))
    (scheme#cons
      'u8->s8
      (syntax-rules
        ()
        ((_ octet0)
         (let ((octet octet0)) (if (> octet 127) (- octet 256) octet)))))
    (scheme#cons 'bytevector:mod (syntax-rules () ((_ x y) (remainder x y))))
    (scheme#cons 'bytevector:div (syntax-rules () ((_ x y) (quotient x y))))
    (scheme#cons 'unspecified (syntax-rules () ((_) (if #f #f))))))

;; END OF FILE
